{"ast":null,"code":"var _jsxFileName = \"/Users/C96363A/Automation/testing-component-with-cypress-storybook/src/stories/loginForm/LoginForm.cy.tsx\";\nimport LoginForm from './LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe('LoginForm', () => {\n  it('should mount the component', () => {\n    cy.mount( /*#__PURE__*/_jsxDEV(LoginForm, {\n      onLogin: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 14\n    }, this));\n  });\n  it('should have password input of type password', () => {\n    cy.mount( /*#__PURE__*/_jsxDEV(LoginForm, {\n      onLogin: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 14\n    }, this));\n    cy.contains('Password').find('input').should('have.attr', 'type', 'password');\n  });\n  it('should render title with default text', () => {\n    cy.mount( /*#__PURE__*/_jsxDEV(LoginForm, {\n      onLogin: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 14\n    }, this));\n    cy.get('legend').should('have.text', 'Log In');\n  });\n  it('should render title with specified text', () => {\n    const title = 'Please Authenticate';\n    cy.mount( /*#__PURE__*/_jsxDEV(LoginForm, {\n      title: title,\n      onLogin: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 14\n    }, this));\n    cy.get('legend').should('have.text', title);\n  });\n  describe('form tests', () => {\n    const username = 'testuser123';\n    const password = 's3cret';\n    beforeEach(() => {\n      const onLoginSpy = cy.spy().as('onLoginSpy');\n      cy.mount( /*#__PURE__*/_jsxDEV(LoginForm, {\n        onLogin: onLoginSpy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 16\n      }, this));\n      cy.contains('Username').find('input').as('usernameInput');\n      cy.contains('Password').find('input').as('passwordInput');\n      cy.get('button').contains('Login').as('loginButton');\n    });\n    it('should call onLogin with username and password when the Login button is clicked', () => {\n      cy.get('@usernameInput').type(username);\n      cy.get('@passwordInput').type(password);\n      cy.get('@loginButton').click();\n      cy.get('@onLoginSpy').should('have.been.calledWith', {\n        username,\n        password\n      });\n    });\n    it('should call onLogin with username and password when enter is pressed in an input', () => {\n      cy.get('@usernameInput').type(username);\n      cy.get('@passwordInput').type(password).type('{enter}');\n      cy.get('@onLoginSpy').should('have.been.calledWith', {\n        username,\n        password\n      });\n    });\n    it('should show both validation errors if login is attempted without entering username or password', () => {\n      cy.get('@loginButton').click();\n      cy.contains('Username is required');\n      cy.contains('Password is required');\n      cy.get('@onLoginSpy').should('not.have.been.called');\n    });\n    it('should only show password validation error if login is attempted without entering password', () => {\n      cy.get('@usernameInput').type(username);\n      cy.get('@loginButton').click();\n      cy.contains('Username is required').should('not.exist');\n      cy.contains('Password is required');\n      cy.get('@onLoginSpy').should('not.have.been.called');\n    });\n    it('should only show username validation error if login is attempted without entering username', () => {\n      cy.get('@passwordInput').type(password);\n      cy.get('@loginButton').click();\n      cy.contains('Username is required');\n      cy.contains('Password is required').should('not.exist');\n      cy.get('@onLoginSpy').should('not.have.been.called');\n    });\n    it('should not show any validation errors before login is attempted', () => {\n      cy.contains('Username is required').should('not.exist');\n      cy.contains('Password is required').should('not.exist');\n    });\n  });\n});","map":{"version":3,"sources":["/Users/C96363A/Automation/testing-component-with-cypress-storybook/src/stories/loginForm/LoginForm.cy.tsx"],"names":["LoginForm","describe","it","cy","mount","contains","find","should","get","title","username","password","beforeEach","onLoginSpy","spy","as","type","click"],"mappings":"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","sourcesContent":["import LoginForm from './LoginForm';\n\ndescribe('LoginForm', () => {\n  it('should mount the component', () => {\n    cy.mount(<LoginForm onLogin={() => { } }/>);\n  });\n\n  it('should have password input of type password', () => {\n    cy.mount(<LoginForm onLogin={() => { } } />);\n    cy.contains('Password')\n      .find('input')\n      .should('have.attr', 'type', 'password');\n  });\n\n  it('should render title with default text', () => {\n    cy.mount(<LoginForm onLogin={() => { } } />);\n    cy.get('legend').should('have.text', 'Log In');\n  });\n\n  it('should render title with specified text', () => {\n    const title = 'Please Authenticate';\n    cy.mount(<LoginForm title={title} onLogin={() => { } } />);\n    cy.get('legend').should('have.text', title);\n  });\n\n  describe('form tests', () => {\n    const username = 'testuser123';\n    const password = 's3cret';\n\n    beforeEach(() => {\n      const onLoginSpy = cy.spy().as('onLoginSpy');\n      cy.mount(<LoginForm onLogin={onLoginSpy}  />);\n      cy.contains('Username').find('input').as('usernameInput');\n      cy.contains('Password').find('input').as('passwordInput');\n      cy.get('button').contains('Login').as('loginButton');\n    });\n\n    it('should call onLogin with username and password when the Login button is clicked', () => {\n      cy.get('@usernameInput').type(username);\n      cy.get('@passwordInput').type(password);\n      cy.get('@loginButton').click();\n      cy.get('@onLoginSpy').should('have.been.calledWith', {\n        username,\n        password,\n      });\n    });\n\n    it('should call onLogin with username and password when enter is pressed in an input', () => {\n      cy.get('@usernameInput').type(username);\n      cy.get('@passwordInput').type(password).type('{enter}');\n      cy.get('@onLoginSpy').should('have.been.calledWith', {\n        username,\n        password,\n      });\n    });\n\n    it('should show both validation errors if login is attempted without entering username or password', () => {\n      cy.get('@loginButton').click();\n      cy.contains('Username is required');\n      cy.contains('Password is required');\n      cy.get('@onLoginSpy').should('not.have.been.called');\n    });\n\n    it('should only show password validation error if login is attempted without entering password', () => {\n      cy.get('@usernameInput').type(username);\n      cy.get('@loginButton').click();\n      cy.contains('Username is required').should('not.exist');\n      cy.contains('Password is required');\n      cy.get('@onLoginSpy').should('not.have.been.called');\n    });\n\n    it('should only show username validation error if login is attempted without entering username', () => {\n      cy.get('@passwordInput').type(password);\n      cy.get('@loginButton').click();\n      cy.contains('Username is required');\n      cy.contains('Password is required').should('not.exist');\n      cy.get('@onLoginSpy').should('not.have.been.called');\n    });\n\n    it('should not show any validation errors before login is attempted', () => {\n      cy.contains('Username is required').should('not.exist');\n      cy.contains('Password is required').should('not.exist');\n    });\n  });\n}); \n"]},"metadata":{},"sourceType":"module"}